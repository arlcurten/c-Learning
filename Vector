http://mropengate.blogspot.com/2015/07/cc-vector-stl.html
(很清楚的簡介)

一、Vector 簡介
Vector 是 C++ 標準程式庫中的一個 class，可視為會自動擴展容量的陣列，是C++標準程式庫中的眾多容器（container）之一，以循序 (Sequential) 的方式維護變數集合，使用前預先 #include <vector> 即可。

Vector 的特色
支援隨機存取
集合尾端增刪元素很快 : O(1)
集合中間增刪元素比較費時 : O(n)
以模板(泛型)方式實現，可以儲存任意類型的變數，包括使用者自定義的資料型態。
有一些容器提供 stable iterator 保證，很不幸的 vector 不保證。因此存在一些可能造成 vector iterator 失效的操作。

二、成員函式簡介
vector 類別是以容器模式為基準設計的，也就是說，基本上它有 begin(), end(), size(), max_size(), empty(), swap()  等用法。


1. 存取元素的用法
vec[i] - 存取索引值為 i 的元素值。
vec.at(i) - 存取索引值為 i 的元素的值，
vec.front() - 回傳 vector 第一個元素的值。
vec.back() - 回傳 vector 最尾元素的值。

2. 新增或移除元素的用法
vec.push_back() - 新增元素至 vector 的尾端，必要時會進行記憶體配置。
vec.pop_back() - 刪除 vector 最尾端的元素。
vec.insert() - 插入一個或多個元素至 vector 內的任意位置。
vec.erase() - 刪除 vector 中一個或多個元素。
vec.clear() - 清空所有元素。

3. 取得長度/容量的用法
vec.empty() - 如果 vector 內部為空，則傳回 true 值。
vec.size() - 取得 vector 目前持有的元素個數。
vec.resize() - 改變 vector 目前持有的元素個數。
vec.capacity() - 取得 vector 目前可容納的最大元素個數。這個方法與記憶體的配置有關，它通常只會增加，不會因為元素被刪減而隨之減少。
重新配置／重設長度
vec.reserve() - 如有必要，可改變 vector 的容量大小（配置更多的記憶體）。在眾多的 STL 實做，容量只能增加，不可以減少。






http://guchonglin-6.blog.163.com/blog/static/575275312009111495615561/


1、vector的insert()方法：可以在vector对象的任意位置前插入一个新元素，同时，vector自动扩张一个元素空间，插入位置后的所有元素依次向后移动一个位置。

值得注意的是：insert()方法要求插入的位置，是元素的迭代器位置，而不是元素下标位置。

下面代码输出：8，2，1，7，9，3

#include<iostream>
#include<vector>
using namespace std;

int main()
{
    vector<int> v(3);
    v[0]=2;
    v[1]=7;
    v[2]=9;
    
    //在最前面的元素前插入8 
    v.insert(v.begin(),8);
    
    //在第二个元素前插入新元素1
    v.insert(v.begin()+2,1);
    
    //在末尾插入新元素1
    v.insert(v.end(),3);      
    
    for(vector<int>::iterator it=v.begin();it!=v.end();it++)
    cout<<*it<<endl;
    system("pause");
    return 0;    
}
2、vector的erase()方法可以在vector中迭代器所指的一个元素或者一段区间的所有元素。

      clear()方法则一次性删除vector中的所有元素。其中的erase()方法只和迭代器指针相关，不能用数组下标实现

      删除。

/*****************************************************************************/
/*********************本程序设计向量的几个经典操作*****************/
/*****************************************************************************/
#include<iostream>
#include<vector>
using namespace std;

int main()
{  
    vector<int> v;
    for(int i=0;i<10;i++)
    v.push_back(i);         //追加元素
    
    //删除单个元素，从0开始计数，删除第二个元素 
    v.erase(v.begin()+2);    
    for(vector<int>::iterator it=v.begin();it!=v.end();it++)
    {
    cout<<*it<<" ";
    }
    cout<<endl;
    
    //删除一段元素，删除迭代器第一到第五区间所有元素
    v.erase(v.begin()+1,v.begin()+5);      //删除的起始位置和删除的最后一个元素的下一个位置    
    for(vector<int>::iterator it=v.begin();it!=v.end();it++)
    {
    cout<<*it<<" ";
    }
    cout<<endl;
    
    //清空向量操作输出大小验证 
    v.clear();
    cout<<v.size()<<endl;     
     
    system("pause");
    return 0;    
}





http://www.cplusplus.com/forum/beginner/21957/

how to pass a vector as a parameter to a function?


void f1(vector<int> & v)
{
     //do what you want here...
}

void f2(const vector<int> & v)
{
     //do what you want here...
}

int main()
{
     vector<int> v1;
     const vector<int> v2;

     f1(v1);
     f2(v2);

     return 0;
}


